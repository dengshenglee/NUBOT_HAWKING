# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nubot_common/case.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class case(genpy.Message):
  _md5sum = "a32cca2312e0e5b356b7165321a7c171"
  _type = "nubot_common/case"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 case_1
int32 case_2
int32 case_3
int32 case_4
int32 case_5
"""
  __slots__ = ['case_1','case_2','case_3','case_4','case_5']
  _slot_types = ['int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       case_1,case_2,case_3,case_4,case_5

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(case, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.case_1 is None:
        self.case_1 = 0
      if self.case_2 is None:
        self.case_2 = 0
      if self.case_3 is None:
        self.case_3 = 0
      if self.case_4 is None:
        self.case_4 = 0
      if self.case_5 is None:
        self.case_5 = 0
    else:
      self.case_1 = 0
      self.case_2 = 0
      self.case_3 = 0
      self.case_4 = 0
      self.case_5 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5i().pack(_x.case_1, _x.case_2, _x.case_3, _x.case_4, _x.case_5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.case_1, _x.case_2, _x.case_3, _x.case_4, _x.case_5,) = _get_struct_5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5i().pack(_x.case_1, _x.case_2, _x.case_3, _x.case_4, _x.case_5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.case_1, _x.case_2, _x.case_3, _x.case_4, _x.case_5,) = _get_struct_5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5i = None
def _get_struct_5i():
    global _struct_5i
    if _struct_5i is None:
        _struct_5i = struct.Struct("<5i")
    return _struct_5i
