// Generated by gencpp from file nubot_common/case.msg
// DO NOT EDIT!


#ifndef NUBOT_COMMON_MESSAGE_CASE_H
#define NUBOT_COMMON_MESSAGE_CASE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nubot_common
{
template <class ContainerAllocator>
struct case_
{
  typedef case_<ContainerAllocator> Type;

  case_()
    : case_1(0)
    , case_2(0)
    , case_3(0)
    , case_4(0)
    , case_5(0)  {
    }
  case_(const ContainerAllocator& _alloc)
    : case_1(0)
    , case_2(0)
    , case_3(0)
    , case_4(0)
    , case_5(0)  {
  (void)_alloc;
    }



   typedef int32_t _case_1_type;
  _case_1_type case_1;

   typedef int32_t _case_2_type;
  _case_2_type case_2;

   typedef int32_t _case_3_type;
  _case_3_type case_3;

   typedef int32_t _case_4_type;
  _case_4_type case_4;

   typedef int32_t _case_5_type;
  _case_5_type case_5;





  typedef boost::shared_ptr< ::nubot_common::case_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nubot_common::case_<ContainerAllocator> const> ConstPtr;

}; // struct case_

typedef ::nubot_common::case_<std::allocator<void> > case;

typedef boost::shared_ptr< ::nubot_common::case > casePtr;
typedef boost::shared_ptr< ::nubot_common::case const> caseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nubot_common::case_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nubot_common::case_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nubot_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nubot_common': ['/home/lex/nubot_ws/src/nubot/nubot_common/msgs'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nubot_common::case_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nubot_common::case_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nubot_common::case_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nubot_common::case_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nubot_common::case_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nubot_common::case_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nubot_common::case_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a32cca2312e0e5b356b7165321a7c171";
  }

  static const char* value(const ::nubot_common::case_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa32cca2312e0e5b3ULL;
  static const uint64_t static_value2 = 0x56b7165321a7c171ULL;
};

template<class ContainerAllocator>
struct DataType< ::nubot_common::case_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nubot_common/case";
  }

  static const char* value(const ::nubot_common::case_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nubot_common::case_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 case_1\n\
int32 case_2\n\
int32 case_3\n\
int32 case_4\n\
int32 case_5\n\
";
  }

  static const char* value(const ::nubot_common::case_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nubot_common::case_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.case_1);
      stream.next(m.case_2);
      stream.next(m.case_3);
      stream.next(m.case_4);
      stream.next(m.case_5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct case_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nubot_common::case_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nubot_common::case_<ContainerAllocator>& v)
  {
    s << indent << "case_1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.case_1);
    s << indent << "case_2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.case_2);
    s << indent << "case_3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.case_3);
    s << indent << "case_4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.case_4);
    s << indent << "case_5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.case_5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NUBOT_COMMON_MESSAGE_CASE_H
